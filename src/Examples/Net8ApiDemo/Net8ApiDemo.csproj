<Project Sdk="Microsoft.NET.Sdk.Web">

    <PropertyGroup>
        <!--<TargetFramework>  net8.0  </TargetFramework>-->
        <!---->
        <!--<TargetFramework>10.0.100-preview</TargetFramework>-->
        <TargetFramework>net10.0</TargetFramework>


        <Nullable>enable</Nullable>
        <ImplicitUsings>enable</ImplicitUsings>
        <NoWarn>
            $(NoWarn);CA2007;1701;1702;1705;1591;
            CS1572;CS1573;CS1574;CS8767;CS8618;CS8601;CS8602;CS0168;CS8600;CS8603;CS8632;CS8604;CS8625;CS8622;CS8620;CS8621;
            CS8019;
            NETSDK;NETSDK1138;
            NU5048;NU5104;NU1803;
        </NoWarn>

        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <LangVersion>preview</LangVersion>
        <Nullable>enable</Nullable>
        <ImplicitUsings>enable</ImplicitUsings>
        <ServerGarbageCollection>true</ServerGarbageCollection>
        <GarbageCollectionAdaptationMode>1</GarbageCollectionAdaptationMode>

    </PropertyGroup>


    <PropertyGroup>
        <VersionMajor>1</VersionMajor>
        <VersionMinor>0</VersionMinor>
        <VersionPatch>0</VersionPatch>
        <VersionQuality>50825</VersionQuality>
        <VersionPrefix>$(VersionMajor).$(VersionMinor).$(VersionPatch).$(VersionQuality)</VersionPrefix>
        <Version>$(VersionMajor).$(VersionMinor).$(VersionPatch).$(VersionQuality)</Version>
        <AssemblyVersion>$(VersionMajor).$(VersionMinor).$(VersionPatch).$(VersionQuality)</AssemblyVersion>
        <FileVersion>$(VersionMajor).$(VersionMinor).$(VersionPatch).$(VersionQuality)</FileVersion>
    </PropertyGroup>

    <ItemGroup>
        <ProjectReference Include="..\..\Dapper\WindNight.Extension.Dapper.Mysql\WindNight.Extension.Dapper.Mysql.csproj" />
        <ProjectReference Include="..\..\WindNight.AspNetCore.Hosting\WindNight.AspNetCore.Hosting.csproj" />
        <ProjectReference Include="..\..\WindNight.Config.Extensions\WindNight.Config.Extensions.csproj" />
        <ProjectReference Include="..\..\WindNight.Extension.LogStore\WindNight.Extension.DcLog.csproj" />
        <ProjectReference Include="..\..\WindNight.Extension\WindNight.Extension.csproj" />
    </ItemGroup>

    <ItemGroup>
        <Content Update="Config\AppSettings.json">
            <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </Content>
        <Content Update="Config\ConnectionStrings.json">
            <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </Content>
        <Content Update="Config\log4net.config">
            <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </Content>
        <Content Update="Config\testConfigs.json">
            <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </Content>
        <Content Update="Config\testConfigs2.json">
            <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        </Content>
    </ItemGroup>


    <!--<Target Name="GenerateBuildInfo" BeforeTargets="CoreCompile">
        -->
    <!-- 获取当前机器名 -->
    <!--
        <PropertyGroup>
            <BuildMachineName>$([System.Environment]::MachineName)</BuildMachineName>
        </PropertyGroup>

        -->
    <!-- 生成包含主机名的C#代码文件 -->
    <!--
        <WriteLinesToFile
            File="$(IntermediateOutputPath)BuildInfo.cs"
            Lines="internal static class BuildInfo { public const string HostName = &quot;$(BuildMachineName)&quot;%3B }"
            Overwrite="true" />

        -->
    <!-- 将生成的文件包含到编译中 -->
    <!--
        <ItemGroup>
            <Compile Include="$(IntermediateOutputPath)BuildInfo.cs" />
        </ItemGroup>

        <Message Text="编译时主机名：$(BuildMachineName)" Importance="high" />


    </Target>-->

    <!--<Target Name="GenerateBuildInfo" BeforeTargets="CoreCompile">
        -->
    <!-- Define properties with fallback and conditional evaluation -->
    <!--
        <PropertyGroup>
            <BuildMachineName Condition="'$(BuildMachineName)' == ''">$([System.Environment]::MachineName)</BuildMachineName>
            <BuildInfoFile>$(IntermediateOutputPath)BuildInfo.cs</BuildInfoFile>
            <ForceBuildInfoRegeneration Condition="'$(ForceBuildInfoRegeneration)' == ''">true</ForceBuildInfoRegeneration>
        </PropertyGroup>

        -->
    <!-- Generate the BuildInfo.cs file conditionally -->
    <!--
        <WriteLinesToFile
            File="$(BuildInfoFile)"
            Lines="internal static class BuildInfo { public const string HostName = &quot;$(BuildMachineName)&quot;%3B }"
            Overwrite="true"
            Condition="!Exists('$(BuildInfoFile)') Or '$(ForceBuildInfoRegeneration)' == 'true'" />

        -->
    <!-- Include the generated file in compilation, only if it exists -->
    <!--
        <ItemGroup>
            <Compile Include="$(BuildInfoFile)" Condition="Exists('$(BuildInfoFile)')">
                <Link>BuildInfo.cs</Link>
            </Compile>
        </ItemGroup>

        -->
    <!-- Log the machine name for debugging -->
    <!--
        <Message Text="编译时主机名：$(BuildMachineName)" Importance="high" Condition="'$(BuildingInsideVisualStudio)' != 'true'" />

        -->
    <!-- Optional: Handle errors if file creation fails -->
    <!--
        <Error Condition="!Exists('$(BuildInfoFile)') And '$(ForceBuildInfoRegeneration)' != 'true'" Text="Failed to generate BuildInfo.cs. Check write permissions or path: $(BuildInfoFile)" />
    </Target>-->

    <Target Name="GenerateBuildInfo" BeforeTargets="CoreCompile">

        <PropertyGroup>
            <ForceBuildInfoRegeneration Condition="'$(ForceBuildInfoRegeneration)' == ''">true</ForceBuildInfoRegeneration>
            <BuildInfoFile>$(IntermediateOutputPath)BuildInfo.cs</BuildInfoFile>

            <BuildMachineName Condition="'$(BuildMachineName)' == ''">$([System.Environment]::MachineName)</BuildMachineName>
            <BuildUserName Condition="'$(BuildUserName)' == ''">$([System.Environment]::UserName)</BuildUserName>
            <BuildOSVersion Condition="'$(BuildOSVersion)' == ''">$([System.Environment]::OSVersion)</BuildOSVersion>
            <BuildProcessorCount Condition="'$(BuildProcessorCount)' == ''">$([System.Environment]::ProcessorCount)</BuildProcessorCount>
            <BuildIs64BitOS Condition="'$(BuildIs64BitOS)' == ''">$([System.Environment]::Is64BitOperatingSystem)</BuildIs64BitOS>
            <BuildRuntimeVersion Condition="'$(BuildRuntimeVersion)' == ''">$([System.Environment]::Version)</BuildRuntimeVersion>
            <BuildSystemDirectory Condition="'$(BuildSystemDirectory)' == ''">$([System.Environment]::SystemDirectory)</BuildSystemDirectory>
            <!--<BuildPathEnv Condition="'$(BuildPathEnv)' == ''">$([System.Environment]::GetEnvironmentVariable('PATH'))</BuildPathEnv>-->
            <BuildTimestamp Condition="'$(BuildTimestamp)' == ''">$([System.DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds())</BuildTimestamp>
            <BuildConfiguration Condition="'$(BuildConfiguration)' == ''">$(Configuration)</BuildConfiguration>
            <BuildVersion Condition="'$(BuildVersion)' == ''">$(Version)</BuildVersion>

            <!--<BuildVersion Condition="'$(BuildAssemblyVersion)' == ''">$(BuildAssemblyInformationalVersion)</BuildVersion>
			<BuildVersion Condition="'$(BuildFileVersion)' == ''">$(FileVersion)</BuildVersion>-->

            <BuildTargetFramework Condition="'$(BuildTargetFramework)' == ''">$(TargetFramework)</BuildTargetFramework>
            <BuildPlatform Condition="'$(BuildPlatform)' == ''">$(Platform)</BuildPlatform>
            <BuildProjectName Condition="'$(BuildProjectName)' == ''">$(MSBuildProjectName)</BuildProjectName>
            <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == ''">$(RuntimeIdentifier)</RuntimeIdentifier>

        </PropertyGroup>

        <!--%3B see from https://learn.microsoft.com/zh-cn/visualstudio/msbuild/msbuild-special-characters?view=vs-2022#special-characters -->
        <PropertyGroup>
            <BuildInfoContent>
                internal static class BuildInfo {
                public const string MachineName = "$(BuildMachineName)" %3B
                public const string UserName = "$(BuildUserName)" %3B
                public const string OSVersion = "$(BuildOSVersion)" %3B
                public const int ProcessorCount = $(BuildProcessorCount) %3B
                public const bool Is64BitOS = $(BuildIs64BitOS.ToLower()) %3B
                public const string RuntimeVersion = "$(BuildRuntimeVersion)" %3B
                public const string SystemDirectory = @"$(BuildSystemDirectory)" %3B

                public const long BuildTs = $(BuildTimestamp) %3B
                public static string BuildTime =&gt; BuildTs.ConvertToTimeFormatUseUnix(); %3B

                public const string BuildConfiguration = "$(BuildConfiguration)" %3B
                public const string BuildVersion = "$(BuildVersion)" %3B

                <!--public const string BuildAssemblyVersion = "$(BuildAssemblyVersion)" %3B
				public const string BuildFileVersion = "$(BuildFileVersion)" %3B-->

                public const string BuildTargetFramework = "$(BuildTargetFramework)" %3B
                public const string BuildPlatform = "$(BuildPlatform)" %3B
                public const string BuildProjectName = "$(BuildProjectName)" %3B
                public const string RuntimeIdentifier = "$(RuntimeIdentifier)" %3B

                public static IReadOnlyDictionary&lt;string, object&gt; BuildInfoDict = new Dictionary&lt;string, object&gt;
                {
                { "MachineName", MachineName },
                { "UserName", UserName},
                { "OSVersion", OSVersion },
                { "ProcessorCount", ProcessorCount },
                { "Is64BitOS", Is64BitOS },
                { "RuntimeVersion",RuntimeVersion },
                { "BuildTs", BuildTs },
                { "BuildTime", BuildTime },
                { "BuildConfiguration", BuildConfiguration },
                { "BuildVersion", BuildVersion },

                <!--{ "BuildAssemblyVersion", BuildAssemblyVersion },
				{ "BuildFileVersion", BuildFileVersion },-->

                { "BuildTargetFramework", BuildTargetFramework },
                { "BuildPlatform", BuildPlatform },
                { "BuildProjectName", BuildProjectName },
                { "RuntimeIdentifier", RuntimeIdentifier },

                }%3B

                }
            </BuildInfoContent>
        </PropertyGroup>

        <WriteLinesToFile File="$(BuildInfoFile)" Lines="$(BuildInfoContent)" Overwrite="true" Condition="!Exists('$(BuildInfoFile)') Or '$(ForceBuildInfoRegeneration)' == 'true'" />



        <!-- Include the generated file in compilation, only if it exists -->
        <ItemGroup>
            <Compile Include="$(BuildInfoFile)" Condition="Exists('$(BuildInfoFile)')">
                <Link>BuildInfo.cs</Link>
            </Compile>
        </ItemGroup>

        <!-- Log the machine name for debugging -->
        <Message Text="Build Info - Machine: $(BuildMachineName), User: $(BuildUserName), OS: $(BuildOSVersion), Processors: $(BuildProcessorCount), 64BitOS: $(BuildIs64BitOS), Runtime: $(BuildRuntimeVersion)" Importance="high" Condition="'$(BuildingInsideVisualStudio)' != 'true'" />

        <!--<Message Text="编译时主机名：$(BuildMachineName)" Importance="high" Condition="'$(BuildingInsideVisualStudio)' != 'true'" />-->

        <!-- Optional: Handle errors if file creation fails -->
        <Error Condition="!Exists('$(BuildInfoFile)') And '$(ForceBuildInfoRegeneration)' != 'true'" Text="Failed to generate BuildInfo.cs. Check write permissions or path: $(BuildInfoFile)" />
    </Target>



</Project>
